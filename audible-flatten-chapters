#!/usr/bin/env bun

import { readdir, copyFile, unlink } from "node:fs/promises";

if (Bun.argv.includes("--help")) {
  console.log();
  console.log("Usage: audible-flatten-chapters [ --no-backup | --revert ]");
  console.log();
  console.log(
    "Run in a folder containing files ending with '-chapters.json' created by audible-cli " +
      "to convert them into a flat structure that can be correctly understood by AAXtoMP3."
  );
  console.log();
  console.log("Options:");
  console.log("  --help \t show this screen");
  console.log("  --no-backup \t do not create backup files (.bak)");
  console.log("  --revert \t revert changes from the backup files (.bak)");
  console.log();
} else if (Bun.argv.includes("--revert")) {
  await revertChanges();
} else {
  await flattenChapters();
}

interface Chapter {
  length_ms: number;
  start_offset_ms: number;
  start_offset_sec: number;
  title: string;
  chapters?: Chapter[];
}
interface ChaptersJson {
  content_metadata: {
    chapter_info: {
      brandIntroDurationMs: number;
      brandOutroDurationMs: number;
      is_accurate: boolean;
      runtime_length_ms: number;
      runtime_length_sec: number;
      chapters: Chapter[];
    };
    content_reference: Record<string, any>;
    last_position_heard: Record<string, any>;
  };
  response_groups: string[];
}

function flattenChapterArray(chs: Chapter[]): Chapter[] {
  return chs.flatMap((c) => [
    { ...c, chapters: undefined },
    ...flattenChapterArray(c.chapters ?? []),
  ]);
}

async function flattenChapters() {
  const files = (await readdir(".")).filter((d) =>
    d.endsWith("-chapters.json")
  );

  if (files.length === 0) {
    console.log("No chapter files found.");
    return;
  }

  for (const chaptersFile of files) {
    if (!Bun.argv.includes("--no-backup")) {
      // backup the original file
      await copyFile(chaptersFile, chaptersFile + ".bak");
    }

    // parse the file
    const original: ChaptersJson = await Bun.file(chaptersFile).json();
    const chapters = original.content_metadata.chapter_info;

    function isObject(value) {
      return (
        value !== null && typeof value === "object" && !Array.isArray(value)
      );
    }

    function isChapter(object) {
      if (
        object.hasOwnProperty("length_ms") &&
        object.hasOwnProperty("start_offset_ms") &&
        object.hasOwnProperty("start_offset_sec") &&
        object.hasOwnProperty("title")
      ) {
        return true;
      } else {
        return false;
      }
    }

    let result: Chapter[] = [];

    function read_chapter(ch) {
      //Rercursively goes through an object and unpacks it.
      //If it contains a an object with chapters, it goes there.
      //If it is an array, it saves its elements one by one.
      function put(ch: Chapter) {
        result.push(ch);
      }
      if (isObject(ch) && ch.hasOwnProperty("chapters")) {
        if (isChapter(ch)) {
          //An edge case when has an array of chapters, but also is a chapter itself.
          const obj = {
            length_ms: ch.length_ms,
            start_offset_ms: ch.start_offset_ms,
            start_offset_sec: ch.start_offset_ms,
            title: ch.title,
          };
          put(obj);
        }
        read_chapter(ch.chapters);
      } else if (Array.isArray(ch)) {
        for (let i = 0; i < ch.length; i++) {
          read_chapter(ch[i]);
        }
      } else {
        put(ch);
      }
    }
    //console.log(chapters);
    read_chapter(chapters);
    //console.log(ch_flattened);
    console.log(result);

    // flatten the chapters
    let flattened: ChaptersJson = original;
    flattened.content_metadata.chapter_info.chapters = result;

    Bun.write(chaptersFile, JSON.stringify(flattened, undefined, 2));
  }
}

async function revertChanges() {
  const files = (await readdir(".")).filter((d) =>
    d.endsWith("-chapters.json.bak")
  );

  if (files.length === 0) {
    console.log("No backup files found.");
    return;
  }

  for (const backupFile of files) {
    const chaptersFile = backupFile.substring(
      0,
      backupFile.length - ".bak".length
    );
    await copyFile(backupFile, chaptersFile);
    await unlink(backupFile);
  }
}

